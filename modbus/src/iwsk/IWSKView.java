package iwsk;

import gnu.io.SerialPort;
import java.awt.Color;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import modbus.fun.Master;
import modbus.fun.Slave;
import modbus.fun.MasterModbusExecutor;
import modbus.fun.ModbusFrame;
import modbus.fun.RS232;
import modbus.fun.SlaveModbusExecutor;


    // Variables declaration - do not modify
/**
 * The application's main frame.
 */
public class IWSKView extends FrameView {
    Thread slaveThread;
    Master master;
    Slave slave;
    public IWSKView(SingleFrameApplication app) {
        super(app);
        super.getFrame().setResizable(false);
        initComponents();        
        CheckAvaiblePorts();
    }

    public void CheckAvaiblePorts()
    {
        List<String> list = new ArrayList<String>();
        String s = new String();

        list = RS232.createSerialPortList();
        cbPortNumber.removeAllItems();
        for (int i=0; i<list.size(); i++)
            cbPortNumber.addItem(list.get(i));
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IWSKApp.getApplication().getMainFrame();
            aboutBox = new IWSKAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IWSKApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        pConfiguration = new javax.swing.JPanel();
        lbSpeed = new javax.swing.JLabel();
        lbTimeout2 = new javax.swing.JLabel();
        lbTransmission = new javax.swing.JLabel();
        cbSpeed = new javax.swing.JComboBox();
        cbTransmission = new javax.swing.JComboBox();
        cbTimeout2 = new javax.swing.JComboBox();
        cbAddress = new javax.swing.JComboBox();
        lbAddress = new javax.swing.JLabel();
        cbStation = new javax.swing.JComboBox();
        lbStation = new javax.swing.JLabel();
        cbPortNumber = new javax.swing.JComboBox();
        lbPortNumber = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        lbTimeout3 = new javax.swing.JLabel();
        cbTimeout3 = new javax.swing.JComboBox();
        cbRetransmission = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSend = new javax.swing.JButton();
        tfFunction = new javax.swing.JTextField();
        scrWindowMessage = new javax.swing.JScrollPane();
        tfMessageWindow = new javax.swing.JTextArea();
        tfAddress = new javax.swing.JTextField();
        tfMessage = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        tfSendFrame = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfGetFrame = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 280));

        pConfiguration.setName("pConfiguration"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        lbSpeed.setText(resourceMap.getString("lbSpeed.text")); // NOI18N
        lbSpeed.setName("lbSpeed"); // NOI18N

        lbTimeout2.setText(resourceMap.getString("lbTimeout2.text")); // NOI18N
        lbTimeout2.setName("lbTimeout2"); // NOI18N

        lbTransmission.setText(resourceMap.getString("lbTransmission.text")); // NOI18N
        lbTransmission.setName("lbTransmission"); // NOI18N

        cbSpeed.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9600", "4800", "2400", "1200", "600", "300", "150" }));
        cbSpeed.setName("cbSpeed"); // NOI18N

        cbTransmission.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "7E1", "7O1", "7N2" }));
        cbTransmission.setName("cbTransmission"); // NOI18N

        cbTimeout2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.01", "0.02", "0.03", "0.04", "0.05", "0.06", "0.07", "0.08", "0.09", "0.10", "0.11", "0.12", "0.13", "0.14", "0.15", "0.16", "0.17", "0.18", "0.19", "0.20", "0.21", "0.22", "0.23", "0.24", "0.25", "0.26", "0.27", "0.28", "0.29", "0.30", "0.31", "0.32", "0.33", "0.34", "0.35", "0.36", "0.37", "0.38", "0.39", "0.40", "0.41", "0.42", "0.43", "0.44", "0.45", "0.46", "0.47", "0.48", "0.49", "0.50", "0.51", "0.52", "0.53", "0.54", "0.55", "0.56", "0.57", "0.58", "0.59", "0.60", "0.61", "0.62", "0.63", "0.64", "0.65", "0.66", "0.67", "0.68", "0.69", "0.70", "0.71", "0.72", "0.73", "0.74", "0.75", "0.76", "0.77", "0.78", "0.79", "0.80", "0.81", "0.82", "0.83", "0.84", "0.85", "0.86", "0.87", "0.88", "0.89", "0.90", "0.91", "0.92", "0.93", "0.94", "0.95", "0.96", "0.97", "0.98", "0.99", "1.00" }));
        cbTimeout2.setName("cbTimeout2"); // NOI18N

        cbAddress.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"0"}));
        cbAddress.setEnabled(false);
        cbAddress.setName("cbAddress"); // NOI18N

        lbAddress.setText(resourceMap.getString("lbAddress.text")); // NOI18N
        lbAddress.setName("lbAddress"); // NOI18N

        cbStation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Master", "Slave" }));
        cbStation.setName("cbStation"); // NOI18N
        cbStation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbStationItemStateChanged(evt);
            }
        });

        lbStation.setText(resourceMap.getString("lbStation.text")); // NOI18N
        lbStation.setName("lbStation"); // NOI18N

        cbPortNumber.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPortNumber.setName("cbPortNumber"); // NOI18N

        lbPortNumber.setText(resourceMap.getString("lbPortNumber.text")); // NOI18N
        lbPortNumber.setName("lbPortNumber"); // NOI18N

        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnChange.setText(resourceMap.getString("btnChange.text")); // NOI18N
        btnChange.setEnabled(false);
        btnChange.setName("btnChange"); // NOI18N
        btnChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeMouseClicked(evt);
            }
        });

        lbTimeout3.setText(resourceMap.getString("lbTimeout3.text")); // NOI18N
        lbTimeout3.setName("lbTimeout3"); // NOI18N

        cbTimeout3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2.0", "2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7", "2.8", "2.9", "3.0", "3.1", "3.2", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "4.0", "4.1", "4.2", "4.3", "4.4", "4.5", "4.6", "4.7", "4.8", "4.9", "5.0", "5.1", "5.2", "5.3", "5.4", "5.5", "5.6", "5.7", "5.8", "5.9", "6.0", "6.1", "6.2", "6.3", "6.4", "6.5", "6.6", "6.7", "6.8", "6.9", "7.0", "7.1", "7.2", "7.3", "7.4", "7.5", "7.6", "7.7", "7.8", "7.9", "8.0", "8.1", "8.2", "8.3", "8.4", "8.5", "8.6", "8.7", "8.8", "8.9", "9.0", "9.1", "9.2", "9.3", "9.4", "9.5", "9.6", "9.7", "9.8", "9.9", "10.0" }));
        cbTimeout3.setName("cbTimeout3"); // NOI18N

        cbRetransmission.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "4", "3", "2", "1", "0" }));
        cbRetransmission.setName("cbRetransmission"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        org.jdesktop.layout.GroupLayout pConfigurationLayout = new org.jdesktop.layout.GroupLayout(pConfiguration);
        pConfiguration.setLayout(pConfigurationLayout);
        pConfigurationLayout.setHorizontalGroup(
            pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pConfigurationLayout.createSequentialGroup()
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lbTransmission)
                            .add(lbSpeed))
                        .add(15, 15, 15)
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cbTransmission, 0, 75, Short.MAX_VALUE)
                            .add(cbSpeed, 0, 75, Short.MAX_VALUE)))
                    .add(pConfigurationLayout.createSequentialGroup()
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lbTimeout2)
                            .add(lbTimeout3))
                        .add(9, 9, 9)
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cbTimeout3, 0, 75, Short.MAX_VALUE)
                            .add(cbTimeout2, 0, 75, Short.MAX_VALUE)))
                    .add(pConfigurationLayout.createSequentialGroup()
                        .add(lbPortNumber)
                        .add(46, 46, 46)
                        .add(cbPortNumber, 0, 75, Short.MAX_VALUE))
                    .add(pConfigurationLayout.createSequentialGroup()
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lbStation)
                            .add(lbAddress)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cbAddress, 0, 75, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cbStation, 0, 75, Short.MAX_VALUE)
                            .add(cbRetransmission, 0, 75, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pConfigurationLayout.createSequentialGroup()
                        .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnChange, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pConfigurationLayout.setVerticalGroup(
            pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbSpeed)
                    .add(cbSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbTransmission)
                    .add(cbTransmission, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbTimeout2)
                    .add(cbTimeout2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbTimeout3)
                    .add(cbTimeout3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbPortNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbPortNumber))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbStation)
                    .add(cbStation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbAddress))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbRetransmission, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSave)
                    .add(btnChange))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setName("jPanel2"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        jPanel1.setName("jPanel1"); // NOI18N

        btnSend.setText(resourceMap.getString("btnSend.text")); // NOI18N
        btnSend.setEnabled(false);
        btnSend.setFocusCycleRoot(true);
        btnSend.setName("btnSend"); // NOI18N
        btnSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSendMouseClicked(evt);
            }
        });

        tfFunction.setBackground(resourceMap.getColor("tfFunction.background")); // NOI18N
        tfFunction.setText(resourceMap.getString("tfFunction.text")); // NOI18N
        tfFunction.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("tfFunction.border.lineColor"))); // NOI18N
        tfFunction.setEnabled(false);
        tfFunction.setName("tfFunction"); // NOI18N

        scrWindowMessage.setAutoscrolls(true);
        scrWindowMessage.setName("scrWindowMessage"); // NOI18N

        tfMessageWindow.setColumns(15);
        tfMessageWindow.setEditable(false);
        tfMessageWindow.setFont(new java.awt.Font("Courier", 0, 10));
        tfMessageWindow.setLineWrap(true);
        tfMessageWindow.setRows(5);
        tfMessageWindow.setWrapStyleWord(true);
        tfMessageWindow.setName("tfMessageWindow"); // NOI18N
        scrWindowMessage.setViewportView(tfMessageWindow);

        tfAddress.setBackground(resourceMap.getColor("tfAddress.background")); // NOI18N
        tfAddress.setText(resourceMap.getString("tfAddress.text")); // NOI18N
        tfAddress.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("tfAddress.border.lineColor"))); // NOI18N
        tfAddress.setEnabled(false);
        tfAddress.setName("tfAddress"); // NOI18N

        tfMessage.setBackground(resourceMap.getColor("tfMessage.background")); // NOI18N
        tfMessage.setText(resourceMap.getString("tfMessage.text")); // NOI18N
        tfMessage.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("tfMessage.border.lineColor"))); // NOI18N
        tfMessage.setEnabled(false);
        tfMessage.setName("tfMessage"); // NOI18N

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setName("jSeparator3"); // NOI18N

        tfSendFrame.setText(resourceMap.getString("tfSendFrame.text")); // NOI18N
        tfSendFrame.setName("tfSendFrame"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        tfGetFrame.setText(resourceMap.getString("tfGetFrame.text")); // NOI18N
        tfGetFrame.setName("tfGetFrame"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel3))
                        .add(20, 20, 20)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tfSendFrame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                            .add(tfGetFrame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, scrWindowMessage)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                            .add(tfAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(tfFunction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(tfMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(btnSend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(tfSendFrame, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfGetFrame, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrWindowMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tfAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tfFunction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(2, 2, 2)
                .add(pConfiguration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1055, 1055, 1055)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pConfiguration, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(iwsk.IWSKApp.class).getContext().getActionMap(IWSKView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseClicked

        try
        {
            int address = Integer.parseInt(tfAddress.getText());
            int function = Integer.parseInt(tfFunction.getText());

            //new Thread(modbus.getTransactionThread(address, function, data)).start();
            ModbusFrame request = new ModbusFrame();
            request.setAddress((byte)address);
            request.setFunction((byte)function);
            request.setData(tfMessage.getText().getBytes());
            if (!master.send(request)) {
                tfMessageWindow.setText(IWSKView.tfMessageWindow.getText()
                        + "Transakcja nieudana pomimo powtórzeń." + "\r\n");
            }
            tfAddress.requestFocusInWindow();

            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        }
        catch (Exception e)
        {

        }
    }//GEN-LAST:event_btnSendMouseClicked



    private void cbStationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbStationItemStateChanged
        if (cbStation.getSelectedIndex() == 0)
        {
            cbRetransmission.setEnabled(true);
            cbAddress.setEnabled(false);
            cbAddress.removeAllItems();
            cbAddress.addItem("0");
        }
        else if (cbStation.getSelectedIndex() == 1)
        {
            cbRetransmission.setEnabled(false);
            cbAddress.setEnabled(true);
            cbAddress.removeAllItems();
            for (int i=1; i<248; i++)
                cbAddress.addItem(String.valueOf(i));
        }
    }//GEN-LAST:event_cbStationItemStateChanged

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        String s = "Konfiguracja portu...\n";

        // <editor-fold defaultstate="collapsed" desc="storing boundrate from comboBox in variable">
        int speed = Integer.parseInt((String)cbSpeed.getItemAt(cbSpeed.getSelectedIndex()));
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing port name from comboBox in variable">
        String portNumber = (String)cbPortNumber.getItemAt(cbPortNumber.getSelectedIndex());
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing sign timeout from comboBox in variable">
        int stimeout = (int)(Float.parseFloat((String)cbTimeout2.getItemAt(cbTimeout2.getSelectedIndex())) * 1000);
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing cycle timeout from comboBox in variable">
        int ctimeout = (int)(Float.parseFloat((String)cbTimeout3.getItemAt(cbTimeout3.getSelectedIndex())) * 1000);
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing data, stop bits and parity from comboBox in variable">
        int dataBits = SerialPort.DATABITS_7;
        int stopBits = SerialPort.STOPBITS_1;
        int parity = SerialPort.PARITY_EVEN;
        String sParity = "EVEN";
        switch ((cbTransmission.getSelectedIndex()))
        {
            case 0:
                stopBits = SerialPort.STOPBITS_1;
                parity = SerialPort.PARITY_EVEN;
                sParity = "EVEN";
                break;
            case 1:
                stopBits = SerialPort.STOPBITS_1;
                parity = SerialPort.PARITY_ODD;
                sParity = "ODD";
                break;
            case 2:
                stopBits = SerialPort.STOPBITS_2;
                parity = SerialPort.PARITY_NONE;
                sParity = "NONE";
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing address from comboBox in variable">
        int address = Integer.parseInt((String)cbAddress.getItemAt(cbAddress.getSelectedIndex()));
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing info about Master or Slave from comboBox in variable">
        boolean isMaster;
        if (address == 0)
            isMaster = true;
        else
            isMaster = false;
        // </editor-fold>

        int timesToResend = Integer.parseInt((String)cbRetransmission.getItemAt(cbRetransmission.getSelectedIndex()));

        RS232 rs = new RS232();
        boolean result = rs.openPort(portNumber, null, speed, dataBits, stopBits, parity, 0);

        if (isMaster) {
            master = new Master(timesToResend, ctimeout, stimeout);    
            MasterModbusExecutor masterExecutor = new MasterModbusExecutor();
            master.setMasterExecutor(masterExecutor);
            master.setRs(rs);
        } else {
            slave = new Slave(stimeout);
            SlaveModbusExecutor slaveExecutor = new SlaveModbusExecutor((byte)address);
            slave.setSlaveExecutor(slaveExecutor);
            slave.setRs(rs);
            slaveThread = new Thread(slave);
            slaveThread.start();
        }

        if (result)
        {
            btnSave.setEnabled(false);
            btnChange.setEnabled(true);            

            cbPortNumber.setEnabled(false);
            cbSpeed.setEnabled(false);
            cbTransmission.setEnabled(false);
            cbTimeout2.setEnabled(false);
            cbTimeout3.setEnabled(false);
            cbRetransmission.setEnabled(false);
            cbStation.setEnabled(false);
            cbAddress.setEnabled(false);

            tfMessage.setText("");
            tfMessage.setEnabled(true);
            tfMessage.setBackground(new Color(255, 255, 255));

            tfGetFrame.setText("");
            tfSendFrame.setText("");

            if (isMaster) {
                tfAddress.setText("");
                tfFunction.setText("");

                tfAddress.setEnabled(true);
                tfFunction.setEnabled(true);

                tfAddress.setBackground(new Color(255, 255, 255));
                tfFunction.setBackground(new Color(255, 255, 255));

                btnSend.setEnabled(true);
            }


            s+= "Konfiguracja przebiegła pomyślnie.\n";
            s+= "[" + cbPortNumber.getSelectedItem().toString() + ", ";
            s+= cbSpeed.getSelectedItem().toString() + "bps, ";
            s+= stopBits + "b stopu, ";
            s+= dataBits + "b danych, ";            
            s+= sParity + ", ";
            s+= "CRLF" + "] \r\n";
            
        }
        else
        {
            s+= "Konfiguracja zakończona błędem.\n";
            s+= "Wybrany port jest w danej chwili używany\r\n";
        }

        tfMessageWindow.setText(s);
        tfAddress.requestFocusInWindow();
        pConfiguration.revalidate();
        mainPanel.revalidate();
        pConfiguration.repaint();
        mainPanel.repaint();
    }//GEN-LAST:event_btnSaveMouseClicked

private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked

        btnSave.setEnabled(true);
        btnChange.setEnabled(false);
        btnSend.setEnabled(false);

        cbPortNumber.setEnabled(true);
        cbSpeed.setEnabled(true);        
        cbTransmission.setEnabled(true);
        cbTimeout2.setEnabled(true);
        cbStation.setEnabled(true);
        cbRetransmission.setEnabled(true);
        if (cbStation.getSelectedIndex() == 1)
        {
            cbRetransmission.setEnabled(false);
            cbAddress.setEnabled(true);
        }
        cbTimeout3.setEnabled(true);

        tfAddress.setText("Adres");
        tfFunction.setText("Kod");
        tfMessage.setText("Dane");

        tfGetFrame.setText("");
        tfSendFrame.setText("");

        tfAddress.setEnabled(false);
        tfFunction.setEnabled(false);
        tfMessage.setEnabled(false);

        tfAddress.setBackground(new Color(240, 240, 240));
        tfFunction.setBackground(new Color(240, 240, 240));
        tfMessage.setBackground(new Color(240, 240, 240));

        if (master != null) {
            master.getRs().closePort();
            master = null;
        }
        if (slave != null) {
            slaveThread.stop();
            slave.getRs().closePort();
            slave = null;
        }
}//GEN-LAST:event_btnChangeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnChange;
    public static javax.swing.JButton btnSave;
    public static javax.swing.JButton btnSend;
    public static javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.JComboBox cbAddress;
    public static javax.swing.JComboBox cbPortNumber;
    public static javax.swing.JComboBox cbRetransmission;
    public static javax.swing.JComboBox cbSpeed;
    public static javax.swing.JComboBox cbStation;
    public static javax.swing.JComboBox cbTimeout2;
    public static javax.swing.JComboBox cbTimeout3;
    public static javax.swing.JComboBox cbTransmission;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JSeparator jSeparator3;
    public static javax.swing.JLabel lbAddress;
    public static javax.swing.JLabel lbPortNumber;
    public static javax.swing.JLabel lbSpeed;
    public static javax.swing.JLabel lbStation;
    public static javax.swing.JLabel lbTimeout2;
    public static javax.swing.JLabel lbTimeout3;
    public static javax.swing.JLabel lbTransmission;
    public static javax.swing.JPanel mainPanel;
    public static javax.swing.JMenuBar menuBar;
    public static javax.swing.JPanel pConfiguration;
    public static javax.swing.JScrollPane scrWindowMessage;
    public static javax.swing.JTextField tfAddress;
    public static javax.swing.JTextField tfFunction;
    public static javax.swing.JTextField tfGetFrame;
    public static javax.swing.JTextField tfMessage;
    public static javax.swing.JTextArea tfMessageWindow;
    public static javax.swing.JTextField tfSendFrame;
    // End of variables declaration//GEN-END:variables
           

    private JDialog aboutBox;
}
