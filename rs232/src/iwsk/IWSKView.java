/*
 * IWSKView.java
 */

package iwsk;

import org.jdesktop.application.Action;
import org.jdesktop.application.*;
import pl.polsl.iwsk.RS232;
import pl.polsl.iwsk.RS232.ResultStatus;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 * The application's main frame.
 */
public class IWSKView extends FrameView {

    private RS232 rs232;

    public IWSKView(SingleFrameApplication app) {
        super(app);
        int i = 0;
        super.getFrame().setResizable(false);

        initComponents();
        rs232 = new RS232();
        rbASCII.setSelected(true);
        CheckAvaiblePorts();
    }

    private void CheckAvaiblePorts() {
        ArrayList<String> list;

        RS232.createSerialPortsArray();
        list = RS232.getPortNamesArray();
        cbPortNumber.removeAllItems();
        for (String s : list) cbPortNumber.addItem(s);
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IWSKApp.getApplication().getMainFrame();
            aboutBox = new IWSKAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IWSKApp.getApplication().show(aboutBox);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        cbSpeed = new javax.swing.JComboBox();
        cbStopBits = new javax.swing.JComboBox();
        cbTerminator = new javax.swing.JComboBox();
        cbFlowControl = new javax.swing.JComboBox();
        cbDataBits = new javax.swing.JComboBox();
        cbPortNumber = new javax.swing.JComboBox();
        cbParity = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        lSpeed = new javax.swing.JLabel();
        lStopBits = new javax.swing.JLabel();
        lTerminator = new javax.swing.JLabel();
        lFlowControl = new javax.swing.JLabel();
        lPortNumber = new javax.swing.JLabel();
        lDataBits = new javax.swing.JLabel();
        lParity = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        scrWindowMessage = new javax.swing.JScrollPane();
        tfMessageWindow = new javax.swing.JTextArea();
        tfMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        lbOB = new javax.swing.JLabel();
        lbDA = new javax.swing.JLabel();
        lbDTR = new javax.swing.JLabel();
        lbDSR = new javax.swing.JLabel();
        lbRTS = new javax.swing.JLabel();
        lbCTS = new javax.swing.JLabel();
        lbCD = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lTimeout = new javax.swing.JLabel();
        cbTimeout = new javax.swing.JComboBox();
        lbRI = new javax.swing.JLabel();
        rbASCII = new javax.swing.JRadioButton();
        rbHex = new javax.swing.JRadioButton();
        btnPing = new javax.swing.JButton();
        btnDTR = new javax.swing.JToggleButton();
        btnRTS = new javax.swing.JToggleButton();
        lbDTRset = new javax.swing.JLabel();
        lbRTSset = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        cbSpeed.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"9600", "4800", "2400", "1200", "600", "300", "150"}));
        cbSpeed.setName("cbSpeed"); // NOI18N

        cbStopBits.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"1", "2"}));
        cbStopBits.setName("cbStopBits"); // NOI18N

        cbTerminator.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"CR", "LF", "CRLF", "brak"}));
        cbTerminator.setName("cbTerminator"); // NOI18N

        cbFlowControl.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"XON/XOFF", "RTS/CTS", "brak"}));
        cbFlowControl.setName("cbFlowControl"); // NOI18N

        cbDataBits.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"8", "7", "6", "5"}));
        cbDataBits.setName("cbDataBits"); // NOI18N

        cbPortNumber.setName("cbPortNumber"); // NOI18N

        cbParity.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"EVEN", "ODD", "brak"}));
        cbParity.setName("cbParity"); // NOI18N

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        lSpeed.setText(resourceMap.getString("lSpeed.text")); // NOI18N
        lSpeed.setName("lSpeed"); // NOI18N

        lStopBits.setText(resourceMap.getString("lStopBits.text")); // NOI18N
        lStopBits.setName("lStopBits"); // NOI18N

        lTerminator.setText(resourceMap.getString("lTerminator.text")); // NOI18N
        lTerminator.setName("lTerminator"); // NOI18N

        lFlowControl.setText(resourceMap.getString("lFlowControl.text")); // NOI18N
        lFlowControl.setName("lFlowControl"); // NOI18N

        lPortNumber.setText(resourceMap.getString("lPortNumber.text")); // NOI18N
        lPortNumber.setName("lPortNumber"); // NOI18N

        lDataBits.setText(resourceMap.getString("lDataBits.text")); // NOI18N
        lDataBits.setName("lDataBits"); // NOI18N

        lParity.setText(resourceMap.getString("lParity.text")); // NOI18N
        lParity.setName("lParity"); // NOI18N

        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnChange.setText(resourceMap.getString("btnChange.text")); // NOI18N
        btnChange.setEnabled(false);
        btnChange.setName("btnChange"); // NOI18N
        btnChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeMouseClicked(evt);
            }
        });

        scrWindowMessage.setAutoscrolls(true);
        scrWindowMessage.setName("scrWindowMessage"); // NOI18N

        tfMessageWindow.setColumns(15);
        tfMessageWindow.setEditable(false);
        tfMessageWindow.setFont(new java.awt.Font("Courier", 0, 10)); // NOI18N
        tfMessageWindow.setLineWrap(true);
        tfMessageWindow.setRows(5);
        tfMessageWindow.setWrapStyleWord(true);
        tfMessageWindow.setName("tfMessageWindow"); // NOI18N
        scrWindowMessage.setViewportView(tfMessageWindow);

        tfMessage.setBackground(resourceMap.getColor("tfMessage.background")); // NOI18N
        tfMessage.setText(resourceMap.getString("tfMessage.text")); // NOI18N
        tfMessage.setEnabled(false);
        tfMessage.setName("tfMessage"); // NOI18N
        tfMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfMessageKeyPressed(evt);
            }
        });

        btnSend.setText(resourceMap.getString("btnSend.text")); // NOI18N
        btnSend.setEnabled(false);
        btnSend.setFocusCycleRoot(true);
        btnSend.setName("btnSend"); // NOI18N
        btnSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSendMouseClicked(evt);
            }
        });

        lbOB.setIcon(resourceMap.getIcon("lbOB.icon")); // NOI18N
        lbOB.setText(resourceMap.getString("lbOB.text")); // NOI18N
        lbOB.setToolTipText(resourceMap.getString("lbOB.toolTipText")); // NOI18N
        lbOB.setName("lbOB"); // NOI18N

        lbDA.setIcon(resourceMap.getIcon("lbDA.icon")); // NOI18N
        lbDA.setText(resourceMap.getString("lbDA.text")); // NOI18N
        lbDA.setToolTipText(resourceMap.getString("lbDA.toolTipText")); // NOI18N
        lbDA.setName("lbDA"); // NOI18N

        lbDTR.setIcon(resourceMap.getIcon("lbDTR.icon")); // NOI18N
        lbDTR.setText(resourceMap.getString("lbDTR.text")); // NOI18N
        lbDTR.setToolTipText(resourceMap.getString("lbDTR.toolTipText")); // NOI18N
        lbDTR.setName("lbDTR"); // NOI18N

        lbDSR.setIcon(resourceMap.getIcon("lbDSR.icon")); // NOI18N
        lbDSR.setText(resourceMap.getString("lbDSR.text")); // NOI18N
        lbDSR.setToolTipText(resourceMap.getString("lbDSR.toolTipText")); // NOI18N
        lbDSR.setName("lbDSR"); // NOI18N

        lbRTS.setIcon(resourceMap.getIcon("lbRTS.icon")); // NOI18N
        lbRTS.setText(resourceMap.getString("lbRTS.text")); // NOI18N
        lbRTS.setToolTipText(resourceMap.getString("lbRTS.toolTipText")); // NOI18N
        lbRTS.setName("lbRTS"); // NOI18N

        lbCTS.setIcon(resourceMap.getIcon("lbCTS.icon")); // NOI18N
        lbCTS.setText(resourceMap.getString("lbCTS.text")); // NOI18N
        lbCTS.setToolTipText(resourceMap.getString("lbCTS.toolTipText")); // NOI18N
        lbCTS.setName("lbCTS"); // NOI18N

        lbCD.setIcon(resourceMap.getIcon("lbCD.icon")); // NOI18N
        lbCD.setText(resourceMap.getString("lbCD.text")); // NOI18N
        lbCD.setToolTipText(resourceMap.getString("lbCD.toolTipText")); // NOI18N
        lbCD.setName("lbCD"); // NOI18N

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setName("jSeparator2"); // NOI18N

        lTimeout.setText(resourceMap.getString("lTimeout.text")); // NOI18N
        lTimeout.setName("lTimeout"); // NOI18N

        cbTimeout.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "1.9", "2.0", "2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7", "2.8", "2.9", "3.0", "3.1", "3.2", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "4.0", "4.1", "4.2", "4.3", "4.4", "4.5", "4.6", "4.7", "4.8", "4.9", "5.0", "5.1", "5.2", "5.3", "5.4", "5.5", "5.6", "5.7", "5.8", "5.9", "6.0", "6.1", "6.2", "6.3", "6.4", "6.5", "6.6", "6.7", "6.8", "6.9", "7.0", "7.1", "7.2", "7.3", "7.4", "7.5", "7.6", "7.7", "7.8", "7.9", "8.0", "8.1", "8.2", "8.3", "8.4", "8.5", "8.6", "8.7", "8.8", "8.9", "9.0", "9.1", "9.2", "9.3", "9.4", "9.5", "9.6", "9.7", "9.8", "9.9", "10.0"}));
        cbTimeout.setName("cbTimeout"); // NOI18N

        lbRI.setIcon(resourceMap.getIcon("lbRI.icon")); // NOI18N
        lbRI.setText(resourceMap.getString("lbRI.text")); // NOI18N
        lbRI.setToolTipText(resourceMap.getString("lbRI.toolTipText")); // NOI18N
        lbRI.setName("lbRI"); // NOI18N

        buttonGroup1.add(rbASCII);
        rbASCII.setText(resourceMap.getString("rbASCII.text")); // NOI18N
        rbASCII.setName("rbASCII"); // NOI18N
        rbASCII.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbASCIIMouseClicked(evt);
            }
        });

        buttonGroup1.add(rbHex);
        rbHex.setText(resourceMap.getString("rbHex.text")); // NOI18N
        rbHex.setName("rbHex"); // NOI18N
        rbHex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbHexMouseClicked(evt);
            }
        });

        btnPing.setText(resourceMap.getString("btnPing.text")); // NOI18N
        btnPing.setEnabled(false);
        btnPing.setName("btnPing"); // NOI18N
        btnPing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPingMouseClicked(evt);
            }
        });

        btnDTR.setText(resourceMap.getString("btnDTR.text")); // NOI18N
        btnDTR.setEnabled(false);
        btnDTR.setFocusPainted(false);
        btnDTR.setName("btnDTR"); // NOI18N
        btnDTR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDTRMouseClicked(evt);
            }
        });

        btnRTS.setFont(resourceMap.getFont("btnRTS.font")); // NOI18N
        btnRTS.setText(resourceMap.getString("btnRTS.text")); // NOI18N
        btnRTS.setToolTipText(resourceMap.getString("btnRTS.toolTipText")); // NOI18N
        btnRTS.setEnabled(false);
        btnRTS.setFocusPainted(false);
        btnRTS.setName("btnRTS"); // NOI18N
        btnRTS.setPressedIcon(resourceMap.getIcon("btnRTS.pressedIcon")); // NOI18N
        btnRTS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRTSMouseClicked(evt);
            }
        });

        lbDTRset.setText(resourceMap.getString("lbDTRset.text")); // NOI18N
        lbDTRset.setName("lbDTRset"); // NOI18N

        lbRTSset.setText(resourceMap.getString("lbRTSset.text")); // NOI18N
        lbRTSset.setName("lbRTSset"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(lTimeout)
                                                        .add(lParity)
                                                        .add(lFlowControl))
                                                .add(8, 8, 8)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, cbParity, 0, 69, Short.MAX_VALUE)
                                                        .add(cbTimeout, 0, 69, Short.MAX_VALUE)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, cbFlowControl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(lTerminator)
                                                        .add(lDataBits)
                                                        .add(lStopBits)
                                                        .add(lSpeed)
                                                        .add(lPortNumber))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                        .add(cbPortNumber, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .add(cbTerminator, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .add(cbDataBits, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .add(cbStopBits, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .add(cbSpeed, 0, 74, Short.MAX_VALUE)))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                                                .add(btnSave, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(btnChange, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(18, 18, 18)
                                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(tfMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(btnSend))
                                        .add(scrWindowMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(rbASCII)
                                                .add(19, 19, 19)
                                                .add(rbHex)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(btnPing)
                                                .add(4, 4, 4)))
                                .add(18, 18, 18)
                                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(lbDTRset)
                                                        .add(lbRTSset))
                                                .add(8, 8, 8)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(btnRTS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(btnDTR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .add(lbCD)
                                        .add(lbRTS)
                                        .add(lbDSR)
                                        .add(lbDTR)
                                        .add(lbDA)
                                        .add(lbOB)
                                        .add(lbRI)
                                        .add(lbCTS))
                                .addContainerGap(17, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(cbSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(lSpeed))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(cbStopBits, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(lStopBits))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(lDataBits)
                                                        .add(cbDataBits, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(lTerminator)
                                                        .add(cbTerminator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(cbPortNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(lPortNumber))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(cbFlowControl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(lFlowControl))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(lParity)
                                                        .add(cbParity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(lTimeout)
                                                        .add(cbTimeout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(btnSave)
                                                        .add(btnChange)))
                                        .add(mainPanelLayout.createSequentialGroup()
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(rbASCII)
                                                        .add(rbHex)
                                                        .add(btnPing, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(scrWindowMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(tfMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(btnSend))))
                                .addContainerGap())
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                        .add(mainPanelLayout.createSequentialGroup()
                                .add(31, 31, 31)
                                .add(lbOB)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbDA)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbDTR)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbDSR)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbRTS)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbCTS)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbCD)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbRI)
                                .add(12, 12, 12)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(btnDTR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(lbDTRset))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(btnRTS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(lbRTSset))
                                .addContainerGap(45, Short.MAX_VALUE))
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(iwsk.IWSKApp.class).getContext().getActionMap(IWSKView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        String s = "Konfiguracja portu...\n";

        int boundRate = Integer.parseInt((String) cbSpeed.getItemAt(cbSpeed.getSelectedIndex()));
        int dataBits = Integer.parseInt((String) cbDataBits.getItemAt(cbDataBits.getSelectedIndex()));
        String portNumber = (String) cbPortNumber.getItemAt(cbPortNumber.getSelectedIndex());

        int stopBits = 0;
        switch ((cbStopBits.getSelectedIndex())) {
            case 0:
                stopBits = 1;
                break;
            case 1:
                stopBits = 2;
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing type of flow control from comboBox in variable">
        int flowControl = 0;
        switch ((cbFlowControl.getSelectedIndex())) {
            case 0:
                flowControl = 12;
                break;
            case 1:
                flowControl = 3;
                break;
            case 2:
                flowControl = 0;
                break;
        }
// </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing terminator from comboBox in variable">
        String terminator = null;
        switch (cbTerminator.getSelectedIndex()) {
            case 0:
                terminator = "\r";
                break;
            case 1:
                terminator = "\n";
                break;
            case 2:
                terminator = "\r\n";
                break;
            case 3:
                terminator = "";
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing parity from comboBox in variable">
        int parity = 0;
        switch (cbParity.getSelectedIndex()) {
            case 0:
                parity = 2;
                break;
            case 1:
                parity = 1;
                break;
            case 2:
                parity = 0;
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing timeout from comboBox in variable">
        int timeout = (int) (Float.parseFloat((String) cbTimeout.getItemAt(cbTimeout.getSelectedIndex())) * 1000);
        // </editor-fold>
        ResultStatus result = rs232.openSerialPort(terminator, parity, timeout, portNumber, boundRate, dataBits, stopBits, flowControl);
        switch (result) {
            case OK: {
                btnSave.setEnabled(false);
                btnChange.setEnabled(true);
                btnSend.setEnabled(true);
                btnPing.setEnabled(true);
                btnDTR.setEnabled(true);
                btnRTS.setEnabled(true);

                cbFlowControl.setEnabled(false);
                cbParity.setEnabled(false);
                cbPortNumber.setEnabled(false);
                cbSpeed.setEnabled(false);
                cbStopBits.setEnabled(false);
                cbTerminator.setEnabled(false);
                cbDataBits.setEnabled(false);
                cbTimeout.setEnabled(false);


                tfMessage.setEnabled(true);
                tfMessage.setBackground(new Color(255, 255, 255));

                s += "Konfiguracja przebiegła pomyślnie.\n";
                s += "[" + cbPortNumber.getSelectedItem().toString() + ", ";
                s += cbSpeed.getSelectedItem().toString() + "bps, ";
                s += cbStopBits.getSelectedItem().toString() + "b stopu, ";
                s += cbDataBits.getSelectedItem().toString() + "b danych, ";
                s += cbFlowControl.getSelectedItem().toString() + ", ";
                s += cbParity.getSelectedItem().toString() + ", ";
                s += cbTerminator.getSelectedItem().toString() + ", ";
                s += cbTimeout.getSelectedItem().toString() + "s] \r\n";

                ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
                lbDA.setIcon(resourceMap.getIcon("false.icon"));
                lbOB.setIcon(resourceMap.getIcon("true.icon"));
                if (rs232.getPort().isCD())
                    lbCD.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbCD.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isCTS())
                    lbCTS.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbCTS.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isDSR())
                    lbDSR.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbDSR.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isRI())
                    lbRI.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbRI.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isDTR())
                    lbDTR.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbDTR.setIcon(resourceMap.getIcon("false.icon"));

                if (rs232.getPort().isRTS())
                    lbRTS.setIcon(resourceMap.getIcon("true.icon"));
                else
                    lbRTS.setIcon(resourceMap.getIcon("false.icon"));
                break;
            }
            case IN_USE: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wybrany port jest w danej chwili używany\r\n";
                break;
            }
            case NOT_FOUND: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wybrany port nie istnieje\r\n";
                break;
            }
            case STREAM_ERROR: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wystąpił problem podczas otwierania portu\r\n";
                break;
            }
            case EXCESSIVE_LISTENERS: {
                s += "Konfiguracja zakończona błędem.\n";
                s += "Wystąpił problem podczas ustawiania nasłuchu zdarzeń\r\n";
                break;
            }
        }

        tfMessageWindow.setText(s);
        tfMessage.requestFocusInWindow();
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked
        btnSave.setEnabled(true);
        btnChange.setEnabled(false);
        btnSend.setEnabled(false);
        btnPing.setEnabled(false);
        btnDTR.setEnabled(false);
        btnRTS.setEnabled(false);

        cbFlowControl.setEnabled(true);
        cbParity.setEnabled(true);
        cbPortNumber.setEnabled(true);
        cbSpeed.setEnabled(true);
        cbStopBits.setEnabled(true);
        cbTerminator.setEnabled(true);
        cbDataBits.setEnabled(true);
        cbTimeout.setEnabled(true);

        tfMessage.setEnabled(false);
        tfMessage.setBackground(new Color(240, 240, 240));

        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        lbDA.setIcon(resourceMap.getIcon("unknown.icon"));
        lbCD.setIcon(resourceMap.getIcon("unknown.icon"));
        lbCTS.setIcon(resourceMap.getIcon("unknown.icon"));
        lbOB.setIcon(resourceMap.getIcon("unknown.icon"));
        lbDSR.setIcon(resourceMap.getIcon("unknown.icon"));
        lbDTR.setIcon(resourceMap.getIcon("unknown.icon"));
        lbRI.setIcon(resourceMap.getIcon("unknown.icon"));
        lbRTS.setIcon(resourceMap.getIcon("unknown.icon"));

        rs232.closeSerialPort();

    }//GEN-LAST:event_btnChangeMouseClicked

    private void btnSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseClicked
        if (IWSKView.tfMessage.getText().length() <= 50) {
            new Thread(rs232.getSendThread(IWSKView.tfMessage.getText())).start();
            tfMessage.requestFocusInWindow();
            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        } else {
            JOptionPane.showMessageDialog(null, "Wiadomość nie może przekraczać 50znaków",
                    "Zbyt długa wiadomość", JOptionPane.WARNING_MESSAGE);
            tfMessage.setText("");
        }


    }//GEN-LAST:event_btnSendMouseClicked

    private void tfMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfMessageKeyPressed

        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER && !rs232.getLineTerminator().equals("")) {
            if (IWSKView.tfMessage.getText().length() <= 50) {
                new Thread(rs232.getSendThread(IWSKView.tfMessage.getText())).start();
                tfMessage.requestFocusInWindow();
                scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
            } else {
                JOptionPane.showMessageDialog(null, "Wiadomość nie może przekraczać 50znaków",
                        "Zbyt długa wiadomość", JOptionPane.WARNING_MESSAGE);
                tfMessage.setText("");
            }
        } else if (rs232.getLineTerminator().equals("") && (((evt.getKeyCode() >= 32) && (evt.getKeyCode() <= 127)) ||
                (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER))) {
            new Thread(rs232.getSendThread(String.valueOf(evt.getKeyChar()))).start();
            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        }
    }//GEN-LAST:event_tfMessageKeyPressed

    private void rbASCIIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbASCIIMouseClicked
        rs232.setDisplayType(RS232.DisplayType.ASCII);
    }//GEN-LAST:event_rbASCIIMouseClicked

    private void rbHexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbHexMouseClicked
        rs232.setDisplayType(RS232.DisplayType.HEX);
    }//GEN-LAST:event_rbHexMouseClicked

    private void btnPingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPingMouseClicked
        new Thread(rs232.getSendThread(String.valueOf('\2'))).start();
        tfMessage.requestFocusInWindow();
    }//GEN-LAST:event_btnPingMouseClicked

    private void btnDTRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDTRMouseClicked
        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        if (!btnDTR.isSelected()) {
            rs232.getPort().setDTR(true);
            lbDTR.setIcon(resourceMap.getIcon("true.icon"));
        } else {
            rs232.getPort().setDTR(false);
            lbDTR.setIcon(resourceMap.getIcon("false.icon"));
        }
    }//GEN-LAST:event_btnDTRMouseClicked

    private void btnRTSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRTSMouseClicked
        ResourceMap resourceMap = Application.getInstance(iwsk.IWSKApp.class).getContext().getResourceMap(IWSKView.class);
        if (!btnRTS.isSelected()) {
            rs232.getPort().setRTS(true);
            lbRTS.setIcon(resourceMap.getIcon("true.icon"));
        } else {
            rs232.getPort().setRTS(false);
            lbRTS.setIcon(resourceMap.getIcon("false.icon"));
        }
    }//GEN-LAST:event_btnRTSMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnChange;
    public static javax.swing.JToggleButton btnDTR;
    public static javax.swing.JButton btnPing;
    public static javax.swing.JToggleButton btnRTS;
    public static javax.swing.JButton btnSave;
    public static javax.swing.JButton btnSend;
    public static javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.JComboBox cbDataBits;
    public static javax.swing.JComboBox cbFlowControl;
    public static javax.swing.JComboBox cbParity;
    public static javax.swing.JComboBox cbPortNumber;
    public static javax.swing.JComboBox cbSpeed;
    public static javax.swing.JComboBox cbStopBits;
    public static javax.swing.JComboBox cbTerminator;
    public static javax.swing.JComboBox cbTimeout;
    public static javax.swing.JSeparator jSeparator1;
    public static javax.swing.JSeparator jSeparator2;
    public static javax.swing.JLabel lDataBits;
    public static javax.swing.JLabel lFlowControl;
    public static javax.swing.JLabel lParity;
    public static javax.swing.JLabel lPortNumber;
    public static javax.swing.JLabel lSpeed;
    public static javax.swing.JLabel lStopBits;
    public static javax.swing.JLabel lTerminator;
    public static javax.swing.JLabel lTimeout;
    public static javax.swing.JLabel lbCD;
    public static javax.swing.JLabel lbCTS;
    public static javax.swing.JLabel lbDA;
    public static javax.swing.JLabel lbDSR;
    public static javax.swing.JLabel lbDTR;
    public static javax.swing.JLabel lbDTRset;
    public static javax.swing.JLabel lbOB;
    public static javax.swing.JLabel lbRI;
    public static javax.swing.JLabel lbRTS;
    public static javax.swing.JLabel lbRTSset;
    public static javax.swing.JPanel mainPanel;
    public static javax.swing.JMenuBar menuBar;
    public static javax.swing.JRadioButton rbASCII;
    public static javax.swing.JRadioButton rbHex;
    public static javax.swing.JScrollPane scrWindowMessage;
    public static javax.swing.JTextField tfMessage;
    public static javax.swing.JTextArea tfMessageWindow;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
}
